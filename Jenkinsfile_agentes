pipeline {
    agent none

    environment {
        AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Análisis Estático y Descarga de Configuración') {
            agent { label 'static-agent' }
            steps {
                sh '''
                    echo "--- Ejecutando en Host: $(hostname) ---"
                    echo "--- Como Usuario: $(whoami) ---"
                '''
                checkout scm
                
                echo "--- Descargando configuración de Staging ---"
                git url: 'git@github.com:kevoa/todo-list-aws-config.git', branch: 'staging', credentialsId: 'github-ssh-key', dir: 'config'

                sh '''
                    echo "--- Instalando y ejecutando análisis estático ---"
                    pip install -q flake8 bandit --break-system-packages
                    /home/jenkins/.local/bin/flake8 ./src --output-file=flake8-report.txt || true
                    /home/jenkins/.local/bin/bandit -r ./src -f html -o bandit-report.html || true
                '''
                
                echo "--- Publicando informes ---"
                publishHTML(target: [ reportDir: '.', reportFiles: 'flake8-report.txt', reportName: 'Informe Flake8' ])
                publishHTML(target: [ reportDir: '.', reportFiles: 'bandit-report.html', reportName: 'Informe Bandit' ])
            }
            post {
                always {
                    stash name: 'config', includes: 'config/**'
                }
            }
        }

        stage('Despliegue en Staging') {
            agent { label 'deploy-test-agent' }
            steps {
                sh '''
                    echo "--- Ejecutando en Host: $(hostname) ---"
                    echo "--- Como Usuario: $(whoami) ---"
                '''
                checkout scm
                unstash 'config'

                echo "--- Construyendo y desplegando con SAM usando fichero de configuración ---"
                sh 'sam build'
                sh 'sam deploy --config-file config/samconfig.toml --config-env staging'

                script {
                    echo "--- Obteniendo y guardando la URL de la API ---"
                    def stackName = 'todo-api-staging'
                    def apiUrl = sh(
                        script: "aws cloudformation describe-stacks --stack-name ${stackName} --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --output text --region ${AWS_REGION}",
                        returnStdout: true
                    ).trim()
                    writeFile file: 'api_url.txt', text: apiUrl
                    stash name: 'apiInfo', includes: 'api_url.txt'
                }
            }
        }

        stage('Pruebas de Integración (Pytest)') {
            agent { label 'deploy-test-agent' }
            steps {
                sh '''
                    echo "--- Ejecutando en Host: $(hostname) ---"
                    echo "--- Como Usuario: $(whoami) ---"
                '''
                checkout scm
                
                echo "--- Recuperando la URL de la API ---"
                unstash 'apiInfo'
                
                script {
                    def apiUrl = readFile('api_url.txt').trim()
                    echo "--- Ejecutando pruebas contra: ${apiUrl} ---"
                    sh 'pip install -q -r test/integration/requirements.txt --break-system-packages'
                    sh """
                        export PATH="/home/jenkins/.local/bin:\$PATH"
                        API_URL=${apiUrl} pytest test/integration/todoApiTest.py
                    """
                }
            }
        }

        stage('Promoción a Master') {
            agent { label 'deploy-test-agent' }
            steps {
                sh '''
                    echo "--- Ejecutando en Host: $(hostname) ---"
                    echo "--- Como Usuario: $(whoami) ---"
                '''
                checkout scm
                
                echo "--- Fusionando 'develop' con 'master' ---"
                sshagent(credentials: ['github-ssh-key']) {
                    sh '''
                        git config --global user.email "jenkins@kevin.com"
                        git config --global user.name "Jenkins CI"
                        git checkout master
                        git merge origin/develop
                        git push origin master
                    '''
                }
            }
        }
    }
}